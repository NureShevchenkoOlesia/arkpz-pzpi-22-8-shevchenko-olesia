Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра ПІ







Звіт з практичного завдання №1
з дисципліни «Аналіз та рефакторинг коду»






Перевірив:                                                                                      Виконала:
ст. викладач кат. ПІ                                                                    ст. гр. ПЗПІ-22-8 
Сокорчук І.П.                                                                               Шевченко О.О.







Харків 2024

    1.1 Тема
    
    Основні рекомендації написання коду для мови програмування JavaScript.
    
    1.2 Мета роботи
    
    Дослідити рекомендації щодо написання коду обраної мови програмування, підготувати презентацію з опрацьованого матеріалу.
    
    1.3 Хід роботи
    Основні рекомендації написання коду для JavaScript:

1) Рекомендація: Розділяти файли за функціоналом та використовувати структуру папок для модульності.
Опис: Це дозволяє зберігати код організованим та легким для підтримки. Кожен модуль розміщується в окремій папці, що спрощує масштабування проекту та знижує ймовірність виникнення помилок через неструктурований код.
     Приклад:
1 src/
2     components/
3     services/
4     utils/

2) Рекомендація: Додавати коментарі для відділення великих секцій коду.
Опис: Коментарі допомагають структурувати код, особливо в великих файлах. Це дає змогу іншим розробникам швидко орієнтуватися в коді, що також полегшує подальшу розробку і тестування.
     Приклад:
1 // --- User API Functions ---

3) Рекомендація: Для форматування коду використовувати 2 пробіли для розділення сегментів, обмежуватися в 80-100 символами на рядок. Відкриті дужки залишати на тому ж рядку.
Опис: Такий стиль форматування забезпечує кращу читабельність і зручність перегляду коду, особливо в командній розробці. Це дозволяє уникати горизонтального прокручування та покращує структурування логічних блоків.
     Приклад:
1 if (isValid) {
2     console.log("Valid");
3 } else {
4     console.log("Invalid");
5 }

4) Рекомендація: Для іменування використовувати CamelCase для змінних та функцій, UPPER_SNAKE_CASE для констант, і PascalCase для класів. Імена обирати зрозумілі та логічні.
Опис: Чіткі іменування покращують зрозумілість коду та полегшують співпрацю в команді. Використання стандартів іменування допомагає підтримувати однорідний стиль коду в проекті.
     Приклад:
CamelCase: userName, getData.
UPPER_SNAKE_CASE: MAX_RETRIES.
PascalCase: UserProfile.

5) Рекомендація: Уникати «магічних чисел».
Опис: Використання змінних або констант замість «магічних чисел» покращує читабельність коду і знижує ймовірність помилок. Це дозволяє також швидко змінювати значення, якщо це необхідно, без необхідності шукати і редагувати кожну появу числа.
     Приклад:
1 //поганий код
2 if (userAge > 18) {
3 
4 //гарний код 
5 const ADULT_AGE = 18;
6 if (userAge > ADULT_AGE) {

6) Рекомендація: Використовувати коментарі для пояснення логіки, а не очевидного синтаксису.
Опис: Коментарі повинні пояснювати неочевидні частини логіки, а не те, що легко зрозуміти з контексту. Це допомагає новим розробникам швидше орієнтуватися в коді та покращує його підтримку.
     Приклад:
1 //поганий код
2 // Цикл проходить по масиву
3 for (let i = 0; i < array.length; i++) {
4      console.log(array[i]);
5 }
6 
7 //гарний код 
8 // Перевіряємо наявність користувача у списку
9 const isUserPresent = users.includes(targetUser);

7) Рекомендація: Використовувати JSDoc для документування функцій, класів і модулів.
Опис: JSDoc дозволяє створювати автоматичну документацію та покращує зрозумілість функцій і класів. Це корисно для великої команди або довгострокових проектів, де важливо документувати всі функції та їх параметри.
     Приклад:
1 /**
2 * Обчислює суму двох чисел
3 * @param {number} a - перше число
4 * @param {number} b - друге число
5 * @returns {number} - сума чисел
6 */
7 function add(a, b) {
8      return a + b;
9 }

8) Рекомендація: Використовувати Git Hooks для запуску перевірок перед комітом.
Опис: Git Hooks дозволяють автоматично перевіряти код перед комітом, що допомагає уникнути внесення помилок в кодову базу, наприклад, через відсутність тестів або стилістичних помилок. 

9) Розбір прикладів виконання однієї функції на мові JavaScript:
1  //поганий код
2  async function data(id) {
3       const res = await fetch(`/api/users/${id}`);
4       return res.json();
5  }
6 
7  //гарний код 
8  // Функція для отримання даних користувача
9  async function fetchUserData(userId) {
10      try {
11      const response = await fetch(`/api/users/${userId}`);
12      if (!response.ok) throw new Error("Failed to fetch user data");
13      return await response.json();
14      } catch (error) {
15      console.error(error);
16      }
17 }


     Висновки: 
     Під час виконання практичного завдання було дослідженно історію створення та особливості мови програмування JavaScript, а також опановано основні правила та рекомендації оформлення програмного коду для обраної мови програмування. Зроблено висновки, що дотримання стандартів покращує якість та підтримуваність коду. 
	Посилання на відеозапис: https://youtu.be/_b1ApegEQFk

     Список використаних джерел:
1. W3Schools.com. W3Schools Online Web Tutorials. URL: Link: (date of access: 30.11.2024).
2. Guidelines for writing JavaScript code examples - The MDN Web Docs project | MDN. MDN Web Docs. URL: Link: date of access: 30.11.2024).
3. JavaScript Naming Conventions | Binary Studio | Solutions & Services | Binary Studio. URL: Link: date of access: 30.11.2024).


Додаток А

     Слайди з презентації наведено на рисунках А.1-16.


Рисунок А.1 – Титульний слайд презентації


Рисунок А.2 – Зміст презентації


Рисунок А.3 – Статистика використання мови JavaScript


Рисунок А.4 – Важливість правильного оформлення коду


Рисунок А.5 – Рекомендації з організації проекту та файлів


Рисунок А.6 – Рекомендації з логічного поділу коду на модулі та класи


Рисунок А.7 – Рекомендації з форматування коду


Рисунок А.8 – Рекомендації з іменування коду


Рисунок А.9 – Рекомендація з уникнення «магічних чисел» для іменування


Рисунок А.10 – Рекомендація з використання коментарів


Рисунок А.11 – Рекомендація з документування коду


Рисунок А.12 – Загальні рекомендації з автоматизації


Рисунок А.13 – Загальні приклади оформлення коду (неправильний)


Рисунок А.14 – Загальні приклади оформлення коду (правильний)


Рисунок А.15 – Висновки щодо рекомендацій з оформлення коду


Рисунок А.16 – Список використаних джерел
