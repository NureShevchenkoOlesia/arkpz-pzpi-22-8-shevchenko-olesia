Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
 
 
 
 
 
 
Звіт
з лабораторної роботи №5
з дисципліни «Аналіз та рефакторинг коду»
 
 
 
 

 
 
Виконала: 
Перевірив: 
ст. гр. ПЗПІ-22-8 
ст. викл. каф. ПІ 
Шевченко О. О. 
Сокорчук І. П. 
 
 
 

 
 
Харків 2024 


ВСТУП 
 

	Метою лабораторної роботи є розгорнути розроблену програмну систему на локальному середовищі, перевірити її роботу та продемонструвати функціональність бізнес-логіки, адміністрування серверної частини та IoT-клієнта, що відповідає описаним у розділі Vision & Scope вимогам.
     Хід даної роботи має такий вигляд: 
  1. Частини програмної системи.
  2. Вимоги середовища та компоненти.
  3. Опис розгортання програмної системи.
  4. Налаштування ІоТ системи.


1 ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
     
     
     Програмна система контролю доступу до лабораторій складається з таких основних частин:
1. Серверна частина:
– реалізована на Python з використанням Flask як веб-фреймворка;
– здійснює взаємодію з базою даних PostgreSQL;
– надає API для клієнтів та інтеграцію з IoT.
2. База даних:
        – PostgreSQL використовується для збереження інформації про користувачів, лабораторії, події доступу та інші сутності.
3. IoT-система:
– Використовує MQTT для передачі даних від сенсорів.
        – Симулятор IoT-девайса реалізований для імітації роботи реального пристрою.
4.   MQTT-брокер:
        – Використовується для обміну даними між IoT-девайсом та сервером. В даній системі застосовується брокер Mosquitto.


2 ВИМОГИ СЕРЕДОВИЩА ТА КОМПОНЕНТИ


     Програмне забезпечення:
– Операційна система: Linux, macOS або Windows.
– Python: Версія 3.10 або вище.
– PostgreSQL: Версія 13 або вище.
– MQTT-брокер: Mosquitto.
– Клієнт для тестування API: Postman.
     Бібліотеки Python:
– Flask, Flask-SQLAlchemy, Flask-Migrate для серверної частини.
– Paho MQTT для роботи з MQTT-протоколом.
– Werkzeug для хешування паролів.
– Psycopg2 для роботи з PostgreSQL.
     Апаратне забезпечення:
– Сервер: Комп'ютер із доступом до Інтернету.
– IoT-пристрій: Для тестування використовується симулятор.
     


3 ОПИС РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ


3.1 Встановлення компонентів

	Перш за все, проект завантажується з репозиторію за допомогою системи керування версіями Git. Для цього створюється локальна копія коду, яка розташовується у відповідному робочому каталозі. Після завантаження виконується перехід до директорії проекту для подальших налаштувань.
     Наступним кроком є створення ізольованого віртуального середовища Python. Це забезпечує контроль над бібліотеками, які використовуються проектом, і запобігає конфліктам із глобальними залежностями в системі. 
     
     3.2 Створення бази даних
     
     За допомогою PostgreSQL створюється нова база даних lab_access_control, а також користувач із відповідними правами доступу. Параметри підключення до бази даних, включаючи ім'я користувача, пароль і назву бази, налаштовуються у конфігураційному файлі .env.
     
     3.3 Реалізація АРІ
     
     Після налаштування бази даних серверна частина системи запускається через Flask. Використовується стандартний локальний хост (127.0.0.1) і порт 5000 для доступу до API. Для перевірки працездатності API застосовуються HTTP-запити до відповідних ендпоінтів, таких як авторизація, створення користувачів, лабораторій та подій доступу. 
     
     3.4 Реалізація IoT
     Для забезпечення роботи IoT-системи встановлюється MQTT-брокер Mosquitto, який відповідає за прийом і передачу даних між сервером та сенсорами. Після налаштування брокера перевіряється його доступність шляхом публікації та отримання тестових повідомлень через клієнт Mosquitto. Симулятор сенсора, реалізований на Python, імітує передачу даних у вигляді багатовимірного вектора відбитків пальців. Ці дані надсилаються на сервер через MQTT. В свою чергу, сервер обробляє отримані повідомлення, перевіряючи рівень доступу користувача, статус лабораторії та відповідність біометричних даних. У разі успішної перевірки створюється запис події доступу в базі даних.
     


ВИСНОВКИ
     
     
     В результаті виконання даної лабораторної роботи було розгорнуто розроблену програмну систему на локальному середовищі, перевірено її роботу та продемонстровано функціональність бізнес-логіки, адміністрування серверної частини та IoT-клієнта, що відповідає описаним у розділі Vision & Scope вимогам. Функцыонал протестовано за допомогою інструменту тестування Postman. 
     Посилання на відео-захист: https://youtu.be/o5ATi1bqRxI 


